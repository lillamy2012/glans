shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('glans/app2')
getwd()
shiny::runApp('glans/app2')
setwd("glans/app3")
shiny::runApp()
shiny::runApp()
install.packages("sensR")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?subset
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?str_locate_all
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list=ls())
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?exists
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?par
shiny::runApp()
?plotOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?segments
shiny::runApp()
shiny::runApp()
R
0.0005*1000
0.000001*1000/1
10^-6*1000/1
0.000001*1000
0.000001*1000
0.000001*1000
0.000001
0.000001*1000
0.9877*1000
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(RColorBrewer)
?brewer.pal
colPal = brewer.pal(12,"Set3")
colPal
shiny::runApp()
colorList = list(
"no mod." = "lightgrey",
"Ac" = colPal[1],
"UBi" = colPal[2],
"Trimethyl" = "red",
"Dimethyl" = "mistyrose",
"Meth" = "pink",
"Ph" = colPal[3],
"Cr" = colPal[5],
"Ci" = colPal[7],
"Su" = colPal[12]
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colRange = brewer.pal(9,"YlOrRd")
plot(1:9,col=colRange,pch=19)
source('~/glans/app3/functions.R', echo=TRUE)
shiny::runApp()
colRange = brewer.pal(3,"RdBu")#[c(3,5,7)]
plot(1:9,col=colRange,pch=19)
colRange = brewer.pal(11,"RdBu")[1:3]
plot(1:9,col=colRange,pch=19)
plot(1:9,col="aqua",pch=19)
colors()
plot(1:9,col="aquamarine",pch=19)
plot(1:9,col="darkorange" ,pch=19)
plot(1:9,col="marin" ,pch=19)
plot(1:9,col="navy" ,pch=19)
plot(1:9,col="grey0" ,pch=19)
plot(1:9,col="grey10" ,pch=19)
plot(1:9,col="grey1" ,pch=19)
plot(1:9,col="grey50" ,pch=19)
plot(1:9,col="grey40" ,pch=19)
plot(1:9,col="grey60" ,pch=19)
plot(1:9,col="grey70" ,pch=19)
plot(1:9,col="grey80" ,pch=19)
plot(1:9,col="lightgrey" ,pch=19)
plot(1:9,col="grey90" ,pch=19)
plot(1:9,col="grey85" ,pch=19)
plot(1:9,col="khaki" ,pch=19)
plot(1:9,col= "darkyellow" ,pch=19)
plot(1:9,col= "yellow" ,pch=19)
plot(1:9,col= "yellow4" ,pch=19)
plot(1:9,col= "yellow3" ,pch=19)
plot(1:9,col= "yellow2" ,pch=19)
plot(1:9,col= "yellow1" ,pch=19)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(1:9,col= "olivegreen" ,pch=19)
colors()
plot(1:9,col= "olivedrab"   ,pch=19)
plot(1:9,col= "olivedrab1"   ,pch=19)
plot(1:9,col= "olivedrab2"   ,pch=19)
plot(1:9,col= "olivedrab3"   ,pch=19)
plot(1:9,col= "olivedrab4"   ,pch=19)
plot(1:9,col= "olivedrab5"   ,pch=19)
plot(1:9,col= c("olivedrab5",darkgreen")   ,pch=19)
""
plot(1:9,col= c("olivedrab5","darkgreen")   ,pch=19)
plot(1:9,col= c("olivedrab","darkgreen")   ,pch=19)
plot(1:9,col= c("olivedrab","green")   ,pch=19)
plot(1:9,col= c("olivedrab","yellowgreen")   ,pch=19)
plot(1:9,col= c("green","yellowgreen")   ,pch=19)
plot(1:9,col= c("olivedrab","yellowgreen")   ,pch=19)
plot(1:9,col= c("olivedrab","yellowgreen","lightgreen")   ,pch=19)
plot(1:9,col= c("olivedrab","yellowgreen","lightgreen","aquamarine")   ,pch=19)
plot(1:9,col= c("olivedrab","yellowgreen","lightgreen","aquamarine","yellow")   ,pch=19)
shiny::runApp()
shiny::runApp()
?pdf
shiny::runApp()
shiny::runApp()
colorList = list(
"no mod." = "grey85",
"Ac" = "aquamarine",
"UBi" = "olivedrab" ,
"Trimethyl" = colRange[3],
"Dimethyl" = colRange[2],
"Meth" = colRange[1],
"Ph" = "navy",
"Cr" = "lightgreen",
"Ci" = "purple",
"Su" = "yellow"
)
colorList
unlist(colorList)
plot(1:30,col=c(unlist(colorList)))
plot(1:30,col=c(unlist(colorList)),pch=19)
cols = colPal = brewer.pal(8,"Dark2")
plot(1:30,col=c(unlist(colorList),colPal),pch=19)
plot(1:20,col=c(unlist(colorList),colPal),pch=19)
plot(1:18,col=c(unlist(colorList),colPal),pch=19,cex=4)
abline(v=10)
abline(v=10.5)
plot(1:18,col=c(unlist(colorList),colPal),pch=19,cex=4)
abline(v=10.5)
colPal = brewer.pal(9,"Set1")
plot(1:19,col=c(unlist(colorList),colPal),pch=19,cex=4)
abline(v=10.5)
colPal = brewer.pal(12,"Paired")
plot(1:21,col=c(unlist(colorList),colPal),pch=19,cex=4)
abline(v=10.5)
colPal = brewer.pal(12,"Paired")[-c(3,4,5)]
plot(1:18,col=c(unlist(colorList),colPal),pch=19,cex=4)
abline(v=10.5)
shiny::runApp()
uu = colors()
grep("ornage",uu)
grep("orange",uu)
uu[grep("orange",uu)]
plot(1:15,col =  uu[grep("orange",uu)],pch=19,cex=4)
plot(1:18,col=c(unlist(colorList),colPal),pch=19,cex=4)
plot(1:15,col =  uu[grep("orange",uu)],pch=19,cex=4)
colorList = list(
"no mod." = "grey85",
"Ac" = "aquamarine",
"UBi" = "olivedrab" ,
"Trimethyl" = colRange[3],
"Dimethyl" = colRange[2],
"Meth" = colRange[1],
"Ph" = "navy",
"Cr" = "darkorange4",
"Ci" = "purple",
"Su" = "yellow"
)
plot(1:18,col=c(unlist(colorList),colPal),pch=19,cex=4)
shiny::runApp()
plot(1:15,col =  uu[grep("orange",uu)],pch=19,cex=4)
shiny::runApp()
plot(1:18,col=c(unlist(colorList),colPal),pch=19,cex=4)
cols = brewer.pal(12,"Paired")[-c(3,4,5)]
plot(1:18,col=c(unlist(colorList),cols),pch=19,cex=4)
cols = brewer.pal(12,"Paired")[-c(2,3,4,5)]
cols
shiny::runApp()
plot(1:12,col= brewer.pal(12,"Paired"),pch=4,cex=4)
plot(1:12,col= brewer.pal(12,"Paired"),pch=19,cex=4)
plot(1:22,col=c(unlist(colorList), brewer.pal(12,"Paired")),pch=19,cex=4)
shiny::runApp()
brewer.pal(12,"Paired")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?grep
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
