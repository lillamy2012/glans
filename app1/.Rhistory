setwd("..")
library(shiny)
runApp("app1/")
setwd("data/")
a = read.table("genes.fpkm_table")
a
head(a)
a = read.table("genes.fpkm_table",header=T)
head(a)
b = read.table("samples.table")
head(b)
b = read.table("samples.table",header=T)
bb = sapply(strsplit(b[,2],"/"),"[[",8)
bb
bb = sapply(strsplit(b[,2],"\\/"),"[[",8)
bb
bb = sapply(strsplit(b[,2],"\\/"),"[[",1)
bb
head(strsplit(b[,2],"\\/"))
bb = sapply(strsplit(b[,2],"\\/"),"[[",10)
bb
colnames(a)
colnames(a)[2:20]
colnames(a)[2:20]=bb
head(a)
save(a,file="rpkm_Mp.rdata")
ls
getwd()]
getwd()
dir()
setwd("../")
ls
getwd()
load("data/rpkm_Mp.Rdata")
rm(list=ls())
runApp("app1/")
runApp("app1/")
getwd()
load("data/rpkm_Mp.rdata")
runApp("app1/")
ls()
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
x    <- asinh(a[,-1])
x
class(a)
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
runApp("app1/")
head(a)
dim(a)
rmins = apply(a[,-1],1,max)
hist(rmins)
hist(asinh(rmins)
)
hist(asinh(rmins),n=1000)
quantile(rmins)
abline(v=asinh(1),col="red".lwd=4)
abline(v=asinh(1),col="red",lwd=4)
abline(v=asinh(1),col="red".lwd=4)
hist(asinh(rmins),n=1000)
hist(asinh(rmins),n=100)
quantile(x[,2])
quantile(x[,3])
quantile(a[,3])
quantile(a[,3],10)
?quantile
quantile(a[,3],seq(0,1,length.out = 10)
)
? aggregate
?cut
cut(a[,2],breakes=quantile(a[,3],seq(0,1,length.out = 10)))
cut(a[,2],breaks=quantile(a[,3],seq(0,1,length.out = 10)))
cut(a[,2],breaks=quantile(a[,3],seq(0,1,length.out = 5)))
cut(a[,2],breaks=quantile(a[,3],seq(0,1,length.out = 4)))
cut(a[,2],breaks=quantile(a[,3],seq(0,1,length.out = 5)))
quantile(a[, 3], seq(0, 1, length.out = 5))
quantile(a[, 3])
quantile(a[,3][which(a[, 3]>0),]
)
quantile(a[which(a[, 3]>0),3])
quantileData <- function(data,n=10){
quantile(data[which(data>0)],seq(0,1,length.out = n))
}
quantileData(a[,3])
quantileData(a[,3],n=5)
cut(data,c(0,qq))
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cut(data,c(0,qq))
}
quantileData(a[,3],n=5)
a[,3][9997]
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cut(data,c(0,qq),include.lowest=T)
}
quantileData(a[,3],n=5)
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cut(data,c(0,qq),include.lowest=F)
}
quantileData(a[,3],n=5)
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cdata= as.numeric(cut(data,c(0,qq),include.lowest=F))
}
quantileData(a[,3],n=5)
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cdata= as.numeric(cut(data,c(0,qq),include.lowest=F))
cdata
}
quantileData(a[,3],n=5)
as = quantileData(a[,3],n=5)
head(as)
table(as)
which(as==1)
data[22037,3]
a[22037,3]
as = quantileData(a[,3],n=10)
table(as)
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cdata= as.numeric(cut(data,c(0,qq[-1]),include.lowest=F))
cdata
}
as = quantileData(a[,3],n=10)
table(as)
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cdata= as.numeric(cut(data,c(0,qq[-1]),include.lowest=F))
cdata[is.na(cdata)]=0
}
as = quantileData(a[,3],n=10)
table(as)
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cdata= as.numeric(cut(data,c(0,qq[-1]),include.lowest=F))
cdata[is.na(cdata)]=0
cdata
}
as = quantileData(a[,3],n=10)
table(as)
qdata = apply(a[,-1],2,quantileData)
qdata
head(qdata)
head(a)
max(a[,2])
which.max(a[,2])
qdata[5402,]
a[5402,]
heatmap(qdata)
heatmap(qdata[1:100,])
heatmap(qdata[1:500,])
library(gplots)
heatmap.2(qdata[1:500,],trace="n")
dim(qdata)
runApp("app1/")
runApp("app1/")
table(qdata)
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
colnames(a)
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
?reactiveValues
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
?isolate
shiny::runApp('app1')
?getSymbols
??getSymbols
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
ls()
head(a)
conds =c(rep("10DAF",2),rep("15DAFemb",2),rep("20DAF1mm",2),rep("20DAFSoft",2),rep("female_3mm",2),
rep("male_thalli",2),"female","thalli","sperm",rep("spore",2),rep("ymalepre",2))
split(a[,-1],conds)
dim(a[,-1])
length(conds)
?split
str(conds)
conds = as.factor(conds)
conds
for (i in nlevels(conds)){}
for (i in nlevels(conds)){ print(i)}
for (i in levels(conds)){ print(i)}
for (i in levels(conds)){ print(consd==i)}
for (i in levels(conds)){ print(conds==i)}
for (i in levels(conds)){ print(which(conds==i)}
for (i in levels(conds)){ print(which(conds==i))}
rep("male_thalli",2),"female","thalli","sperm",rep("spore",2),rep("ymalepre",2)))
conds =as.factor(c(rep("10DAF",2),rep("15DAFemb",2),rep("20DAF1mm",2),rep("20DAFSoft",2),rep("female_3mm",2),
rep("male_thalli",2),"female","thalli","sperm",rep("spore",2),rep("ymalepre",2)))
conds
meanData <- function(data=a[,-1],set=conds){
m=matrix(NA,nrow=nrow(a),ncol=nlevels(conds))
colnames(m)=levels(conds)
for (i in levels(conds)){
m[,i]= rowMeans(data[,which(conds==i),drop=F])
}
m
}
meansMat = meanData(a[,-1],set=conds)
head(meansMat)
meanSdData <- function(data=a[,-1],set=conds){
m=matrix(NA,nrow=nrow(a),ncol=nlevels(conds))
colnames(m)=levels(conds)
s = m
for (i in levels(conds)){
m[,i]= rowMeans(data[,which(conds==i),drop=F])
s[,1] = apply(data[,which(conds==i),drop=F],1,sd)
}
tot=list(m,s)
}
meansMat = meanData(a[,-1],set=conds)
str(meansMat)
head(meansMat[[1]])
head(meansMat[1])
head(meansMat)
meanSdData <- function(data=a[,-1],set=conds){
m=matrix(NA,nrow=nrow(a),ncol=nlevels(conds))
colnames(m)=levels(conds)
s = m
for (i in levels(conds)){
m[,i]= rowMeans(data[,which(conds==i),drop=F])
s[,1] = apply(data[,which(conds==i),drop=F],1,sd)
}
tot=list(m,s)
}
meansMat = meanData(a[,-1],set=conds)
meansMat = meanSdData(a[,-1],set=conds)
head(meansMat[[1]])
head(meansMat[[2]])
meanSdData <- function(data=a[,-1],set=conds){
m=matrix(NA,nrow=nrow(a),ncol=nlevels(conds))
colnames(m)=levels(conds)
s = m
for (i in levels(conds)){
m[,i]= rowMeans(data[,which(conds==i),drop=F])
s[,i] = apply(data[,which(conds==i),drop=F],1,sd)
}
tot=list(m,s)
}
meansMat = meanSdData(a[,-1],set=conds)
head(meansMat[[2]])
shiny::runApp('app1')
shiny::runApp('app1')
ls()
rm(list=ls())
load("../data/rpkm_Mp.rdata")
conds =as.factor(c(rep("10DAF",2),rep("15DAFemb",2),rep("20DAF1mm",2),rep("20DAFSoft",2),rep("female_3mm",2),
rep("male_thalli",2),"female","thalli","sperm",rep("spore",2),rep("ymalepre",2)))
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cdata= as.numeric(cut(data,c(0,qq[-1]),include.lowest=F))
cdata[is.na(cdata)]=0
cdata
}
meanSdData <- function(data=a[,-1],set=conds){
m=matrix(NA,nrow=nrow(a),ncol=nlevels(conds))
colnames(m)=levels(conds)
s = m
for (i in levels(conds)){
m[,i]= rowMeans(data[,which(conds==i),drop=F])
s[,i] = apply(data[,which(conds==i),drop=F],1,sd)
}
tot=list(m,s)
}
qdata = apply(a[,-1],2,quantileData)
meansMatS = meanSdData(a[,-1],set=conds)
meansMat = as.data.frame(rbind(a[,1],meansMatS[[1]]))
load("data/rpkm_Mp.rdata")
conds =as.factor(c(rep("10DAF",2),rep("15DAFemb",2),rep("20DAF1mm",2),rep("20DAFSoft",2),rep("female_3mm",2),
rep("male_thalli",2),"female","thalli","sperm",rep("spore",2),rep("ymalepre",2)))
quantileData <- function(data,n=10){
qq=quantile(data[which(data>0)],seq(0,1,length.out = n))
cdata= as.numeric(cut(data,c(0,qq[-1]),include.lowest=F))
cdata[is.na(cdata)]=0
cdata
}
meanSdData <- function(data=a[,-1],set=conds){
m=matrix(NA,nrow=nrow(a),ncol=nlevels(conds))
colnames(m)=levels(conds)
s = m
for (i in levels(conds)){
m[,i]= rowMeans(data[,which(conds==i),drop=F])
s[,i] = apply(data[,which(conds==i),drop=F],1,sd)
}
tot=list(m,s)
}
qdata = apply(a[,-1],2,quantileData)
meansMatS = meanSdData(a[,-1],set=conds)
meansMat = as.data.frame(rbind(a[,1],meansMatS[[1]]))
meansMat = as.data.frame(cbind(a[,1],meansMatS[[1]]))
ls()
?save
save(a,qdata,meansMat,file="data/app1.data.rdata")
save(a,qdata,meansMat,file="data/app1_data.rdata")
shiny::runApp('app1')
shiny::runApp('app1')
shiny::runApp('app1')
library(shiny)
shiny::runApp()
ls()
shiny::runApp()
shiny::runApp()
